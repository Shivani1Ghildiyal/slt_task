1.	Write the difference between checked and unchecked exception with example code
1) Unchecked Exception

The exceptions that are not checked at compile time are called unchecked exceptions,
 classes that extends RuntimeException comes under unchecked exceptions. 
public class ExceptionTest {  
  
public static void main(String[] args) {  
int i = 10/0;  
}  
}  


2) CheckedExceptions

Exceptions that are checked at compile-time are called checked exceptions, in Exception hierarchy all classes that extends Exception class except UncheckedException comes under checked exception category. 

In certain situations Java Compiler forced the programmer to write a Exception handler at compile time
try {  
    String input = reader.readLine();  
    System.out.println("You typed : "+input); 
    } catch (IOException e) {  
      System.out.println(e);  
}  
   
 

2.	Write the difference between throw and throws with example code


throws clause is used to declare an exception and throw keyword is used to throw an exception explicitly.
If we see syntax wise then throw is followed by an instance variable and throws is followed by exception class names.
The keyword throw is used inside method body to invoke an exception and throws clause is used in method declaration (signature).
For example

throw

throw new Exception("You have some exception")
throw new IOException("Connection failed!!")
throws

public int myMethod() throws IOException, ArithmeticException, NullPointerException {}
3.	Write a note or nested tryucatch block with example code
Sometimes a situation may arise where a part of a block may cause one error and the entire block itself may cause another error.
 In such cases, exception handlers have to be nested.
class Excep6{  
 public static void main(String args[]){  
  try{  
    try{  
     System.out.println("going to divide");  
     int b =39/0;  
    }catch(ArithmeticException e){System.out.println(e);}  
   
    try{  
    int a[]=new int[5];  
    a[5]=4;  
    }catch(ArrayIndexOutOfBoundsException e){System.out.println(e);}  
     
    System.out.println("other statement);  
  }catch(Exception e){System.out.println("handeled");}  
  
  System.out.println("normal flow..");  
 }  
}
4.	Write a note on MultiThreading and MultiTasking.
mutitreading
Multithreading in java is a process of executing multiple threads simultaneously.
Multitasking
Multitasking is a process of executing multiple tasks simultaneously. We use multitasking to utilize the CPU. 